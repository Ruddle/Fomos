#[panic_handler]
fn panic(info: &core::panic::PanicInfo) -> ! {
    //  x86_64::instructions::interrupts::int3();
    unsafe {
        (LOGGER.f)("panic".as_ptr(), 5);
    };
    unsafe {
        let s = &format!("{:?}", info);
        (LOGGER.f)(s.as_ptr(), s.len() as u32)
    };
    loop {}
}

pub static mut LOGGER: Logger = Logger::init();

pub fn log(s: &str) {
    unsafe { (LOGGER.f)(s.as_ptr(), s.len() as u32) }
}

type LogFn = extern "C" fn(*const u8, u32);
extern "C" fn nop(s: *const u8, l: u32) {}
pub struct Logger {
    pub f: LogFn,
}
impl Logger {
    pub const fn init() -> Self {
        Self { f: nop }
    }
    pub fn swap(&mut self, f2: LogFn) {
        self.f = f2;
    }
}
#[repr(C)]
pub struct Context<'a, T> {
    pub version: u8,
    pub start_time: u64,
    pub log: extern "C" fn(s: *const u8, l: u32),
    pub pid: u64,
    pub fb: FB<'a>,
    pub calloc: extern "C" fn(usize, usize) -> *mut u8,
    pub cdalloc: extern "C" fn(*mut u8, usize, usize),
    pub store: &'a mut Option<Box<T>>,
    pub input: &'a Input,
}

pub const HISTORY_SIZE: usize = 64;

#[derive(Clone, Debug, Copy)]
pub enum Local {
    En,
    Fr,
}

const xmap: [&str; 255 * 6] = [
    "",
    "",
    "",
    "",
    "",
    "",
    "Escape",
    "NoSymbol",
    "Escape",
    "",
    "",
    "",
    "ampersand",
    "1",
    "1",
    "exclam",
    "onesuperior",
    "exclamdown",
    "eacute",
    "2",
    "2",
    "at",
    "asciitilde",
    "oneeighth",
    "quotedbl",
    "3",
    "3",
    "numbersign",
    "numbersign",
    "sterling",
    "apostrophe",
    "4",
    "4",
    "dollar",
    "braceleft",
    "dollar",
    "parenleft",
    "5",
    "5",
    "percent",
    "bracketleft",
    "threeeighths",
    "minus",
    "6",
    "6",
    "asciicircum",
    "bar",
    "fiveeighths",
    "egrave",
    "7",
    "7",
    "ampersand",
    "grave",
    "seveneighths",
    "underscore",
    "8",
    "8",
    "asterisk",
    "backslash",
    "trademark",
    "ccedilla",
    "9",
    "9",
    "parenleft",
    "asciicircum",
    "plusminus",
    "agrave",
    "0",
    "0",
    "parenright",
    "at",
    "degree",
    "parenright",
    "degree",
    "minus",
    "underscore",
    "bracketright",
    "questiondown",
    "equal",
    "plus",
    "equal",
    "plus",
    "braceright",
    "dead_ogonek",
    "BackSpace",
    "BackSpace",
    "BackSpace",
    "BackSpace",
    "",
    "",
    "Tab",
    "ISO_Left_Tab",
    "Tab",
    "ISO_Left_Tab",
    "",
    "",
    "a",
    "A",
    "q",
    "Q",
    "ae",
    "AE",
    "z",
    "Z",
    "w",
    "W",
    "guillemotleft",
    "less",
    "e",
    "E",
    "e",
    "E",
    "EuroSign",
    "cent",
    "r",
    "R",
    "r",
    "R",
    "paragraph",
    "registered",
    "t",
    "T",
    "t",
    "T",
    "tslash",
    "Tslash",
    "y",
    "Y",
    "y",
    "Y",
    "leftarrow",
    "yen",
    "u",
    "U",
    "u",
    "U",
    "downarrow",
    "uparrow",
    "i",
    "I",
    "i",
    "I",
    "rightarrow",
    "idotless",
    "o",
    "O",
    "o",
    "O",
    "oslash",
    "Oslash",
    "p",
    "P",
    "p",
    "P",
    "thorn",
    "THORN",
    "dead_circumflex",
    "dead_diaeresis",
    "bracketleft",
    "braceleft",
    "dead_diaeresis",
    "dead_abovering",
    "dollar",
    "sterling",
    "bracketright",
    "braceright",
    "currency",
    "dead_macron",
    "Return",
    "NoSymbol",
    "Return",
    "",
    "",
    "",
    "Control_L",
    "NoSymbol",
    "Control_L",
    "",
    "",
    "",
    "q",
    "Q",
    "a",
    "A",
    "at",
    "Greek_OMEGA",
    "s",
    "S",
    "s",
    "S",
    "ssharp",
    "section",
    "d",
    "D",
    "d",
    "D",
    "eth",
    "ETH",
    "f",
    "F",
    "f",
    "F",
    "dstroke",
    "ordfeminine",
    "g",
    "G",
    "g",
    "G",
    "eng",
    "ENG",
    "h",
    "H",
    "h",
    "H",
    "hstroke",
    "Hstroke",
    "j",
    "J",
    "j",
    "J",
    "dead_hook",
    "dead_horn",
    "k",
    "K",
    "k",
    "K",
    "kra",
    "ampersand",
    "l",
    "L",
    "l",
    "L",
    "lstroke",
    "Lstroke",
    "m",
    "M",
    "semicolon",
    "colon",
    "mu",
    "masculine",
    "ugrave",
    "percent",
    "apostrophe",
    "quotedbl",
    "dead_circumflex",
    "dead_caron",
    "twosuperior",
    "asciitilde",
    "grave",
    "asciitilde",
    "notsign",
    "notsign",
    "Shift_L",
    "NoSymbol",
    "Shift_L",
    "",
    "",
    "",
    "asterisk",
    "mu",
    "backslash",
    "bar",
    "dead_grave",
    "dead_breve",
    "w",
    "W",
    "z",
    "Z",
    "lstroke",
    "Lstroke",
    "x",
    "X",
    "x",
    "X",
    "guillemotright",
    "greater",
    "c",
    "C",
    "c",
    "C",
    "cent",
    "copyright",
    "v",
    "V",
    "v",
    "V",
    "leftdoublequotemark",
    "leftsinglequotemark",
    "b",
    "B",
    "b",
    "B",
    "rightdoublequotemark",
    "rightsinglequotemark",
    "n",
    "N",
    "n",
    "N",
    "n",
    "N",
    "comma",
    "question",
    "m",
    "M",
    "dead_acute",
    "dead_doubleacute",
    "semicolon",
    "period",
    "comma",
    "less",
    "horizconnector",
    "multiply",
    "colon",
    "slash",
    "period",
    "greater",
    "periodcentered",
    "division",
    "exclam",
    "section",
    "slash",
    "question",
    "dead_belowdot",
    "dead_abovedot",
    "Shift_R",
    "NoSymbol",
    "Shift_R",
    "",
    "",
    "",
    "KP_Multiply",
    "KP_Multiply",
    "KP_Multiply",
    "KP_Multiply",
    "KP_Multiply",
    "KP_Multiply",
    "Alt_L",
    "Meta_L",
    "Alt_L",
    "Meta_L",
    "",
    "",
    "space",
    "NoSymbol",
    "space",
    "",
    "",
    "",
    "Caps_Lock",
    "NoSymbol",
    "Caps_Lock",
    "",
    "",
    "",
    "F1",
    "F1",
    "F1",
    "F1",
    "F1",
    "F1",
    "F2",
    "F2",
    "F2",
    "F2",
    "F2",
    "F2",
    "F3",
    "F3",
    "F3",
    "F3",
    "F3",
    "F3",
    "F4",
    "F4",
    "F4",
    "F4",
    "F4",
    "F4",
    "F5",
    "F5",
    "F5",
    "F5",
    "F5",
    "F5",
    "F6",
    "F6",
    "F6",
    "F6",
    "F6",
    "F6",
    "F7",
    "F7",
    "F7",
    "F7",
    "F7",
    "F7",
    "F8",
    "F8",
    "F8",
    "F8",
    "F8",
    "F8",
    "F9",
    "F9",
    "F9",
    "F9",
    "F9",
    "F9",
    "F10",
    "F10",
    "F10",
    "F10",
    "F10",
    "F10",
    "Num_Lock",
    "NoSymbol",
    "Num_Lock",
    "",
    "",
    "",
    "Scroll_Lock",
    "NoSymbol",
    "Scroll_Lock",
    "",
    "",
    "",
    "KP_Home",
    "KP_7",
    "KP_Home",
    "KP_7",
    "",
    "",
    "KP_Up",
    "KP_8",
    "KP_Up",
    "KP_8",
    "",
    "",
    "KP_Prior",
    "KP_9",
    "KP_Prior",
    "KP_9",
    "",
    "",
    "KP_Subtract",
    "KP_Subtract",
    "KP_Subtract",
    "KP_Subtract",
    "KP_Subtract",
    "KP_Subtract",
    "KP_Left",
    "KP_4",
    "KP_Left",
    "KP_4",
    "",
    "",
    "KP_Begin",
    "KP_5",
    "KP_Begin",
    "KP_5",
    "",
    "",
    "KP_Right",
    "KP_6",
    "KP_Right",
    "KP_6",
    "",
    "",
    "KP_Add",
    "KP_Add",
    "KP_Add",
    "KP_Add",
    "KP_Add",
    "KP_Add",
    "KP_End",
    "KP_1",
    "KP_End",
    "KP_1",
    "",
    "",
    "KP_Down",
    "KP_2",
    "KP_Down",
    "KP_2",
    "",
    "",
    "KP_Next",
    "KP_3",
    "KP_Next",
    "KP_3",
    "",
    "",
    "KP_Insert",
    "KP_0",
    "KP_Insert",
    "KP_0",
    "",
    "",
    "KP_Delete",
    "KP_Decimal",
    "KP_Delete",
    "KP_Decimal",
    "",
    "",
    "ISO_Level3_Shift",
    "NoSymbol",
    "ISO_Level3_Shift",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "less",
    "greater",
    "less",
    "greater",
    "bar",
    "brokenbar",
    "F11",
    "F11",
    "F11",
    "F11",
    "F11",
    "F11",
    "F12",
    "F12",
    "F12",
    "F12",
    "F12",
    "F12",
    "",
    "",
    "",
    "",
    "",
    "",
    "Katakana",
    "NoSymbol",
    "Katakana",
    "",
    "",
    "",
    "Hiragana",
    "NoSymbol",
    "Hiragana",
    "",
    "",
    "",
    "Henkan_Mode",
    "NoSymbol",
    "Henkan_Mode",
    "",
    "",
    "",
    "Hiragana_Katakana",
    "NoSymbol",
    "Hiragana_Katakana",
    "",
    "",
    "",
    "Muhenkan",
    "NoSymbol",
    "Muhenkan",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "KP_Enter",
    "NoSymbol",
    "KP_Enter",
    "",
    "",
    "",
    "Control_R",
    "NoSymbol",
    "Control_R",
    "",
    "",
    "",
    "KP_Divide",
    "KP_Divide",
    "KP_Divide",
    "KP_Divide",
    "KP_Divide",
    "KP_Divide",
    "Print",
    "Sys_Req",
    "Print",
    "Sys_Req",
    "",
    "",
    "ISO_Level3_Shift",
    "NoSymbol",
    "ISO_Level3_Shift",
    "",
    "",
    "",
    "Linefeed",
    "NoSymbol",
    "Linefeed",
    "",
    "",
    "",
    "Home",
    "NoSymbol",
    "Home",
    "",
    "",
    "",
    "Up",
    "NoSymbol",
    "Up",
    "",
    "",
    "",
    "Prior",
    "NoSymbol",
    "Prior",
    "",
    "",
    "",
    "Left",
    "NoSymbol",
    "Left",
    "",
    "",
    "",
    "Right",
    "NoSymbol",
    "Right",
    "",
    "",
    "",
    "End",
    "NoSymbol",
    "End",
    "",
    "",
    "",
    "Down",
    "NoSymbol",
    "Down",
    "",
    "",
    "",
    "Next",
    "NoSymbol",
    "Next",
    "",
    "",
    "",
    "Insert",
    "NoSymbol",
    "Insert",
    "",
    "",
    "",
    "Delete",
    "NoSymbol",
    "Delete",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "XF86AudioMute",
    "NoSymbol",
    "XF86AudioMute",
    "",
    "",
    "",
    "XF86AudioLowerVolume",
    "NoSymbol",
    "XF86AudioLowerVolume",
    "",
    "",
    "",
    "XF86AudioRaiseVolume",
    "NoSymbol",
    "XF86AudioRaiseVolume",
    "",
    "",
    "",
    "XF86PowerOff",
    "NoSymbol",
    "XF86PowerOff",
    "",
    "",
    "",
    "KP_Equal",
    "NoSymbol",
    "KP_Equal",
    "",
    "",
    "",
    "plusminus",
    "NoSymbol",
    "plusminus",
    "",
    "",
    "",
    "Pause",
    "Break",
    "Pause",
    "Break",
    "",
    "",
    "XF86LaunchA",
    "NoSymbol",
    "XF86LaunchA",
    "",
    "",
    "",
    "KP_Decimal",
    "KP_Decimal",
    "KP_Decimal",
    "KP_Decimal",
    "",
    "",
    "Hangul",
    "NoSymbol",
    "Hangul",
    "",
    "",
    "",
    "Hangul_Hanja",
    "NoSymbol",
    "Hangul_Hanja",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "Super_L",
    "NoSymbol",
    "Super_L",
    "",
    "",
    "",
    "Super_R",
    "NoSymbol",
    "Super_R",
    "",
    "",
    "",
    "Menu",
    "NoSymbol",
    "Menu",
    "",
    "",
    "",
    "Cancel",
    "NoSymbol",
    "Cancel",
    "",
    "",
    "",
    "Redo",
    "NoSymbol",
    "Redo",
    "",
    "",
    "",
    "SunProps",
    "NoSymbol",
    "SunProps",
    "",
    "",
    "",
    "Undo",
    "NoSymbol",
    "Undo",
    "",
    "",
    "",
    "SunFront",
    "NoSymbol",
    "SunFront",
    "",
    "",
    "",
    "XF86Copy",
    "NoSymbol",
    "XF86Copy",
    "",
    "",
    "",
    "XF86Open",
    "NoSymbol",
    "XF86Open",
    "",
    "",
    "",
    "XF86Paste",
    "NoSymbol",
    "XF86Paste",
    "",
    "",
    "",
    "Find",
    "NoSymbol",
    "Find",
    "",
    "",
    "",
    "XF86Cut",
    "NoSymbol",
    "XF86Cut",
    "",
    "",
    "",
    "Help",
    "NoSymbol",
    "Help",
    "",
    "",
    "",
    "XF86MenuKB",
    "NoSymbol",
    "XF86MenuKB",
    "",
    "",
    "",
    "XF86Calculator",
    "NoSymbol",
    "XF86Calculator",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "XF86Sleep",
    "NoSymbol",
    "XF86Sleep",
    "",
    "",
    "",
    "XF86WakeUp",
    "NoSymbol",
    "XF86WakeUp",
    "",
    "",
    "",
    "XF86Explorer",
    "NoSymbol",
    "XF86Explorer",
    "",
    "",
    "",
    "XF86Send",
    "NoSymbol",
    "XF86Send",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "XF86Xfer",
    "NoSymbol",
    "XF86Xfer",
    "",
    "",
    "",
    "XF86Launch1",
    "NoSymbol",
    "XF86Launch1",
    "",
    "",
    "",
    "XF86Launch2",
    "NoSymbol",
    "XF86Launch2",
    "",
    "",
    "",
    "XF86WWW",
    "NoSymbol",
    "XF86WWW",
    "",
    "",
    "",
    "XF86DOS",
    "NoSymbol",
    "XF86DOS",
    "",
    "",
    "",
    "XF86ScreenSaver",
    "NoSymbol",
    "XF86ScreenSaver",
    "",
    "",
    "",
    "XF86RotateWindows",
    "NoSymbol",
    "XF86RotateWindows",
    "",
    "",
    "",
    "XF86TaskPane",
    "NoSymbol",
    "XF86TaskPane",
    "",
    "",
    "",
    "XF86Mail",
    "NoSymbol",
    "XF86Mail",
    "",
    "",
    "",
    "XF86Favorites",
    "NoSymbol",
    "XF86Favorites",
    "",
    "",
    "",
    "XF86MyComputer",
    "NoSymbol",
    "XF86MyComputer",
    "",
    "",
    "",
    "XF86Back",
    "NoSymbol",
    "XF86Back",
    "",
    "",
    "",
    "XF86Forward",
    "NoSymbol",
    "XF86Forward",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "XF86Eject",
    "NoSymbol",
    "XF86Eject",
    "",
    "",
    "",
    "XF86Eject",
    "XF86Eject",
    "XF86Eject",
    "XF86Eject",
    "",
    "",
    "XF86AudioNext",
    "NoSymbol",
    "XF86AudioNext",
    "",
    "",
    "",
    "XF86AudioPlay",
    "XF86AudioPause",
    "XF86AudioPlay",
    "XF86AudioPause",
    "",
    "",
    "XF86AudioPrev",
    "NoSymbol",
    "XF86AudioPrev",
    "",
    "",
    "",
    "XF86AudioStop",
    "XF86Eject",
    "XF86AudioStop",
    "XF86Eject",
    "",
    "",
    "XF86AudioRecord",
    "NoSymbol",
    "XF86AudioRecord",
    "",
    "",
    "",
    "XF86AudioRewind",
    "NoSymbol",
    "XF86AudioRewind",
    "",
    "",
    "",
    "XF86Phone",
    "NoSymbol",
    "XF86Phone",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "XF86Tools",
    "NoSymbol",
    "XF86Tools",
    "",
    "",
    "",
    "XF86HomePage",
    "NoSymbol",
    "XF86HomePage",
    "",
    "",
    "",
    "XF86Reload",
    "NoSymbol",
    "XF86Reload",
    "",
    "",
    "",
    "XF86Close",
    "NoSymbol",
    "XF86Close",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "XF86ScrollUp",
    "NoSymbol",
    "XF86ScrollUp",
    "",
    "",
    "",
    "XF86ScrollDown",
    "NoSymbol",
    "XF86ScrollDown",
    "",
    "",
    "",
    "parenleft",
    "NoSymbol",
    "parenleft",
    "",
    "",
    "",
    "parenright",
    "NoSymbol",
    "parenright",
    "",
    "",
    "",
    "XF86New",
    "NoSymbol",
    "XF86New",
    "",
    "",
    "",
    "Redo",
    "NoSymbol",
    "Redo",
    "",
    "",
    "",
    "XF86Tools",
    "NoSymbol",
    "XF86Tools",
    "",
    "",
    "",
    "XF86Launch5",
    "NoSymbol",
    "XF86Launch5",
    "",
    "",
    "",
    "XF86Launch6",
    "NoSymbol",
    "XF86Launch6",
    "",
    "",
    "",
    "XF86Launch7",
    "NoSymbol",
    "XF86Launch7",
    "",
    "",
    "",
    "XF86Launch8",
    "NoSymbol",
    "XF86Launch8",
    "",
    "",
    "",
    "XF86Launch9",
    "NoSymbol",
    "XF86Launch9",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "XF86AudioMicMute",
    "NoSymbol",
    "XF86AudioMicMute",
    "",
    "",
    "",
    "XF86TouchpadToggle",
    "NoSymbol",
    "XF86TouchpadToggle",
    "",
    "",
    "",
    "XF86TouchpadOn",
    "NoSymbol",
    "XF86TouchpadOn",
    "",
    "",
    "",
    "XF86TouchpadOff",
    "NoSymbol",
    "XF86TouchpadOff",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "Mode_switch",
    "NoSymbol",
    "Mode_switch",
    "",
    "",
    "",
    "NoSymbol",
    "Alt_L",
    "NoSymbol",
    "Alt_L",
    "",
    "",
    "NoSymbol",
    "Meta_L",
    "NoSymbol",
    "Meta_L",
    "",
    "",
    "NoSymbol",
    "Super_L",
    "NoSymbol",
    "Super_L",
    "",
    "",
    "NoSymbol",
    "Hyper_L",
    "NoSymbol",
    "Hyper_L",
    "",
    "",
    "XF86AudioPlay",
    "NoSymbol",
    "XF86AudioPlay",
    "",
    "",
    "",
    "XF86AudioPause",
    "NoSymbol",
    "XF86AudioPause",
    "",
    "",
    "",
    "XF86Launch3",
    "NoSymbol",
    "XF86Launch3",
    "",
    "",
    "",
    "XF86Launch4",
    "NoSymbol",
    "XF86Launch4",
    "",
    "",
    "",
    "XF86LaunchB",
    "NoSymbol",
    "XF86LaunchB",
    "",
    "",
    "",
    "XF86Suspend",
    "NoSymbol",
    "XF86Suspend",
    "",
    "",
    "",
    "XF86Close",
    "NoSymbol",
    "XF86Close",
    "",
    "",
    "",
    "XF86AudioPlay",
    "NoSymbol",
    "XF86AudioPlay",
    "",
    "",
    "",
    "XF86AudioForward",
    "NoSymbol",
    "XF86AudioForward",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "Print",
    "NoSymbol",
    "Print",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "XF86WebCam",
    "NoSymbol",
    "XF86WebCam",
    "",
    "",
    "",
    "XF86AudioPreset",
    "NoSymbol",
    "XF86AudioPreset",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "XF86Mail",
    "NoSymbol",
    "XF86Mail",
    "",
    "",
    "",
    "XF86Messenger",
    "NoSymbol",
    "XF86Messenger",
    "",
    "",
    "",
    "XF86Search",
    "NoSymbol",
    "XF86Search",
    "",
    "",
    "",
    "XF86Go",
    "NoSymbol",
    "XF86Go",
    "",
    "",
    "",
    "XF86Finance",
    "NoSymbol",
    "XF86Finance",
    "",
    "",
    "",
    "XF86Game",
    "NoSymbol",
    "XF86Game",
    "",
    "",
    "",
    "XF86Shop",
    "NoSymbol",
    "XF86Shop",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "Cancel",
    "NoSymbol",
    "Cancel",
    "",
    "",
    "",
    "XF86MonBrightnessDown",
    "NoSymbol",
    "XF86MonBrightnessDown",
    "",
    "",
    "",
    "XF86MonBrightnessUp",
    "NoSymbol",
    "XF86MonBrightnessUp",
    "",
    "",
    "",
    "XF86AudioMedia",
    "NoSymbol",
    "XF86AudioMedia",
    "",
    "",
    "",
    "XF86Display",
    "NoSymbol",
    "XF86Display",
    "",
    "",
    "",
    "XF86KbdLightOnOff",
    "NoSymbol",
    "XF86KbdLightOnOff",
    "",
    "",
    "",
    "XF86KbdBrightnessDown",
    "NoSymbol",
    "XF86KbdBrightnessDown",
    "",
    "",
    "",
    "XF86KbdBrightnessUp",
    "NoSymbol",
    "XF86KbdBrightnessUp",
    "",
    "",
    "",
    "XF86Send",
    "NoSymbol",
    "XF86Send",
    "",
    "",
    "",
    "XF86Reply",
    "NoSymbol",
    "XF86Reply",
    "",
    "",
    "",
    "XF86MailForward",
    "NoSymbol",
    "XF86MailForward",
    "",
    "",
    "",
    "XF86Save",
    "NoSymbol",
    "XF86Save",
    "",
    "",
    "",
    "XF86Documents",
    "NoSymbol",
    "XF86Documents",
    "",
    "",
    "",
    "XF86Battery",
    "NoSymbol",
    "XF86Battery",
    "",
    "",
    "",
    "XF86Bluetooth",
    "NoSymbol",
    "XF86Bluetooth",
    "",
    "",
    "",
    "XF86WLAN",
    "NoSymbol",
    "XF86WLAN",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "XF86MonBrightnessCycle",
    "NoSymbol",
    "XF86MonBrightnessCycle",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "XF86WWAN",
    "NoSymbol",
    "XF86WWAN",
    "",
    "",
    "",
    "XF86RFKill",
    "NoSymbol",
    "XF86RFKill",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
];

fn getxmap(local: Local, code: usize, shift: bool, altg: bool) -> &'static str {
    return &xmap[code * 6
        + (if altg {
            4
        } else {
            (if shift { 1 } else { 0 })
                + match local {
                    Local::En => 2,
                    Local::Fr => 0,
                }
        })];
}

#[repr(usize)]
#[derive(Clone, Debug, Copy, PartialEq)]
pub enum Key {
    Reserved = 0,
    Esc = 1,
    Key1 = 2,
    Key2 = 3,
    Key3 = 4,
    Key4 = 5,
    Key5 = 6,
    Key6 = 7,
    Key7 = 8,
    Key8 = 9,
    Key9 = 10,
    Key0 = 11,
    KeyMinus = 12,
    KeyEqual = 13,
    KeyBackspace = 14,
    KeyTab = 15,
    KeyQ = 16,
    KeyW = 17,
    KeyE = 18,
    KeyR = 19,
    KeyT = 20,
    KeyY = 21,
    KeyU = 22,
    KeyI = 23,
    KeyO = 24,
    KeyP = 25,
    KeyLeftBrace = 26,
    KeyRightBrace = 27,
    KeyEnter = 28,
    KeyLeftCtrl = 29,
    KeyA = 30,
    KeyS = 31,
    KeyD = 32,
    KeyF = 33,
    KeyG = 34,
    KeyH = 35,
    KeyJ = 36,
    KeyK = 37,
    KeyL = 38,
    KeySemicolon = 39,
    KeyApostrophe = 40,
    KeyGrave = 41,
    KeyLeftShift = 42,
    KeyBackslash = 43,
    KeyZ = 44,
    KeyX = 45,
    KeyC = 46,
    KeyV = 47,
    KeyB = 48,
    KeyN = 49,
    KeyM = 50,
    KeyComma = 51,
    KeyDot = 52,
    KeySlash = 53,
    KeyRightShift = 54,
    KeyKpAsterisk = 55,
    KeyLeftAlt = 56,
    KeySpace = 57,
    KeyCapsLock = 58,
    KeyF1 = 59,
    KeyF2 = 60,
    KeyF3 = 61,
    KeyF4 = 62,
    KeyF5 = 63,
    KeyF6 = 64,
    KeyF7 = 65,
    KeyF8 = 66,
    KeyF9 = 67,
    KeyF10 = 68,
    KeyNumLock = 69,
    KeyScrollLock = 70,
    KeyKp7 = 71,
    KeyKp8 = 72,
    KeyKp9 = 73,
    KeyKpMinus = 74,
    KeyKp4 = 75,
    KeyKp5 = 76,
    KeyKp6 = 77,
    KeyKpPlus = 78,
    KeyKp1 = 79,
    KeyKp2 = 80,
    KeyKp3 = 81,
    KeyKp0 = 82,
    KeyKpDot = 83,
    KeyZenkakuHankaku = 85,
    Key102nd = 86,
    KeyF11 = 87,
    KeyF12 = 88,
    KeyRo = 89,
    KeyKatakana = 90,
    KeyHiragana = 91,
    KeyHenkan = 92,
    KeyKatakanaHiragana = 93,
    KeyMuhenkan = 94,
    KeyKpJpComma = 95,
    KeyKpEnter = 96,
    KeyRightCtrl = 97,
    KeyKpSlash = 98,
    KeySysRq = 99,
    KeyRightAlt = 100,
    KeyLineFeed = 101,
    KeyHome = 102,
    KeyUp = 103,
    KeyPageUp = 104,
    KeyLeft = 105,
    KeyRight = 106,
    KeyEnd = 107,
    KeyDown = 108,
    KeyPageDown = 109,
    KeyInsert = 110,
    KeyDelete = 111,
    KeyMacro = 112,
    KeyMute = 113,
    KeyVolumeDown = 114,
    KeyVolumeUp = 115,
    KeyPower = 116,
    KeyKpEqual = 117,
    KeyKpPlusMinus = 118,
    KeyPause = 119,
    KeyScale = 120,
    KeyKpComma = 121,
    KeyHangeul = 122,
    KeyHanja = 123,
    KeyYen = 124,
    KeyLeftMeta = 125,
    KeyRightMeta = 126,
    KeyCompose = 127,
    KeyStop = 128,
    KeyAgain = 129,
    KeyProps = 130,
    KeyUndo = 131,
    KeyFront = 132,
    KeyCopy = 133,
    KeyOpen = 134,
    KeyPaste = 135,
    KeyFind = 136,
    KeyCut = 137,
    KeyHelp = 138,
    KeyMenu = 139,
    KeyCalc = 140,
    KeySetup = 141,
    KeySleep = 142,
    KeyWakeup = 143,
    KeyFile = 144,
    KeySend = 145,
    KeyDeleteFile = 146,
    KeyXfer = 147,
    KeyProg1 = 148,
    KeyProg2 = 149,
    KeyWww = 150,
    KeyMsDos = 151,
    // KeyCoffee = 152,
    KeyScreenLock = 152,
    KeyDirection = 153,
    KeyCycleWindows = 154,
    KeyMail = 155,
    KeyBookmarks = 156,
    KeyComputer = 157,
    KeyBack = 158,
    KeyForward = 159,
    KeyCloseCd = 160,
    KeyEjectCd = 161,
    KeyEjectCloseCd = 162,
    KeyNextSong = 163,
    KeyPlayPause = 164,
    KeyPreviousSong = 165,
    KeyStopCd = 166,
    KeyRecord = 167,
    KeyRewind = 168,
    KeyPhone = 169,
    KeyIso = 170,
    KeyConfig = 171,
    KeyHomePage = 172,
    KeyRefresh = 173,
    KeyExit = 174,
    KeyMove = 175,
    KeyEdit = 176,
    KeyScrollUp = 177,
    KeyScrollDown = 178,
    KeyKpLeftParenthesis = 179,
    KeyKpRightParenthesis = 180,
    KeyNew = 181,
    KeyRedo = 182,
    KeyF13 = 183,
    KeyF14 = 184,
    KeyF15 = 185,
    KeyF16 = 186,
    KeyF17 = 187,
    KeyF18 = 188,
    KeyF19 = 189,
    KeyF20 = 190,
    KeyF21 = 191,
    KeyF22 = 192,
    KeyF23 = 193,
    KeyF24 = 194,
    KeyMax = 195,

    BtnLeft = 0x110,
    BtnRight = 0x111,
    BtnMiddle = 0x112,
    BtnSide = 0x113,
}

impl Key {
    pub fn char(&self, local: Local, shift: bool, altg: bool) -> Option<char> {
        if *self as usize >= 255 {
            return None;
        }
        log(&alloc::format!("{}", *self as usize));
        let s = getxmap(local, *self as usize, shift, altg);

        if s.len() == 1 {
            return Some(s.chars().next().unwrap());
        }
        let other = match s {
            "minus" => Some('-'),
            "plus" => Some('+'),
            "equal" => Some('='),
            "space" => Some(' '),
            "bracketleft" => Some('['),
            "bracketright" => Some(']'),
            "braceleft" => Some('{'),
            "braceright" => Some('}'),
            "parenleft" => Some('('),
            "parenright" => Some(')'),
            "less" => Some('<'),
            "greater" => Some('>'),
            "comma" => Some(','),
            "asterisk" => Some('*'),
            "slash" => Some('/'),
            "colon" => Some(':'),
            "percent" => Some('%'),
            "semicolon" => Some(';'),
            "question" => Some('?'),
            "quotedbl" => Some('"'),
            "apostrophe" => Some('\''),
            "twosuperior" => Some('²'),
            "exclam" => Some('!'),
            _ => None,
        };

        if other == None {
            log(s);
        }

        return other;
    }
}

#[repr(C)]
#[derive(Clone, Debug, Copy)]
pub struct InputEvent {
    pub trigger: bool,
    pub key: Key,
}
#[repr(C)]
pub struct Input {
    pub mx: usize,
    pub my: usize,
    pub keys: [u8; 1024],
    pub history_last_index: usize,
    pub history_ring: [InputEvent; HISTORY_SIZE],
}

#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(C)]
pub struct RGBA {
    pub r: u8,
    pub g: u8,
    pub b: u8,
    pub a: u8,
}

#[repr(C)]
pub struct FB<'a> {
    pub pixels: &'a mut [RGBA],
    pub w: usize,
    pub h: usize,
}

use core::alloc::GlobalAlloc;

use alloc::{boxed::Box, format};

extern "C" fn a_init(size: usize, align: usize) -> *mut u8 {
    panic!("")
}
extern "C" fn d_init(ptr: *mut u8, size: usize, align: usize) {
    panic!("")
}
#[repr(C)]
pub struct AllocFromCtx {
    a: extern "C" fn(usize, usize) -> *mut u8,
    d: extern "C" fn(*mut u8, usize, usize),
}
unsafe impl GlobalAlloc for AllocFromCtx {
    unsafe fn alloc(&self, layout: alloc::alloc::Layout) -> *mut u8 {
        (self.a)(layout.size(), layout.align())
    }

    unsafe fn dealloc(&self, ptr: *mut u8, layout: alloc::alloc::Layout) {
        (self.d)(ptr, layout.size(), layout.align());
    }
}
impl AllocFromCtx {
    pub const fn init() -> Self {
        Self {
            a: a_init,
            d: d_init,
        }
    }
    pub fn swap<T>(&mut self, ctx: &mut Context<T>) {
        let ptr = self;
        ptr.a = ctx.calloc;
        ptr.d = ctx.cdalloc;
    }
}
#[global_allocator]
pub static mut ALLOCATOR: AllocFromCtx = AllocFromCtx::init();
